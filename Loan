/*
 Kquane Ingram
 Date: 9/14/14
 */

#include "bankaccount.h"
#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

int all_digits(char* a)
{
    // Method used for getting all digits
    assert (a!=NULL);
    
    int i=0;
    while(i<strlen(a) && isdigit (a[i]))
    i++;
    
    return i==strlen(a);
}

int is_valid_ownerName (char* ownerName)
{
    //Method to check if ownerName is valid
    return name != NULL && strlen (ownerName) > 0;
}

int is_valid_accountNumber (char* accountNum)
{
    //Method to check if AccountNumber is valid
	return accountNum != NULL && strlen (accountNum) > 0 && all_digits(accountNum);
}

int is_valid_currentBalance(double bal)
{
    //Method to check if Balance is valid
  return bal >= 0;
}

bankaccount* create_account (char* ownerName, char* accountNum, double bal)
{
	bankaccount* a = NULL;
    
	if(is_valid_ownerName (ownerName) && is_valid_accountNumber (accountNum) && is_valid_currentBalance (bal))
	{
        a = malloc (sizeof (bankaccount));
		a -> owner = malloc ((strlen (ownerName) + 1) * sizeof(char));
		strcpy (a -> owner, ownerName);
		a -> accountNumber = malloc ((strlen (accountNum) + 1) * sizeof(char));
		strcpy (a -> accountNumber, accountNum);
		a -> balance = bal;
	}
    else
    {
        //return NULL if any input is not valid
        return NULL;
    }
    return a;
}

void display_account (bankaccount* a)
{
    assert(a !=NULL);  //assertion used to verify pointer to the bank account is not NULL

    printf ("Name of Account Owner: %s\n", a -> owner);
    printf ("Tne Account Number is: %s\n", a -> accountNumber);
    printf ("The balance is: %g\n", a -> balance);
}

int withdraw (bankaccount* a, double withdrawAmount)
{
    /* pointer to bank account (cannot be NULL).
       assertion used to verify pointer to the bank account is not NULL
     */
    assert (a!=NULL);
    
    if( 0 <= withdrawAmount && withdrawAmount <= (a -> balance))
    {
        a->balance =(double)(a->balance -withdrawAmount);
    }
    else
    {
        return 0;
    }
    return  a->balance;
}

int deposit (bankaccount* a, double depositAmount)
{
    assert (a!=NULL);
    
    if( depositAmount >= 0)
    {
        a->balance =(double)(a->balance + depositAmount);
    }
    else
    {
        return 0;
    }
    return depositAmount > 0;
}

void delete_account (bankaccount* a) 
{
    assert (a!=NULL);
    
    if (a != NULL)
    {
      if (a -> owner != NULL){
          free (a -> owner);
      }
      
      if (a -> accountNumber != NULL){
          free (a -> accountNumber);
      }
      free(a);
    }
}



 HEADER FILE
 
 /*
 Kquane Ingram
 Date: 9/12/14
 */

#ifndef _BANKACCOUNT_H
#define _BANKACCOUNT_H

typedef struct
{
    char* owner;
    char* accountNumber;
    double balance;
} bankaccount;

/***********************************************************
 preconditions:
 name cannot be null and has at least 1 character
 accountNum cannot be null and has at least 1 character, 
 all characters are digits
 balance must be positive
 
 return NULL is any precondition is not met
************************************************************/
bankaccount* create_account (char* ownerName, char* accountNum,
                             double balance);

/***********************************************************
 preconditions:
 bank_account cannot be null
 
 nothing happens if a is NULL
**********************************************************/
void display_account (bankaccount* a);


/***********************************************************
 preconditions:
 bank_account cannot be null
 postcondition:
 depositAmount has been added to balance
 
 returns 0 if inout is not valid
***********************************************************/
int deposit (bankaccount* a, double depositAmount);


/***********************************************************
 Preconditions:
 bank_account cannot be null
 
 postconditions:
 withdrawAmount has been subtracted from balance
 
 returns 0 if input is not valid
************************************************************/
int withdraw (bankaccount* a, double withdrawAmount);


/***********************************************************
 preconditions:
 bank_account cannot be null
 Postcondition:
 all memory allocated to the bank account has to be deallocated
 
 nothing happens a is NULL
************************************************************/
void  delete_account (bankaccount* a);

#endif



TESTFILE

/*
 Kquane Ingram
 Date: 9/14/14
*/

#include "bankaccount.h"
#include <stdio.h>

int main()
{
    bankaccount* a1 = create_account("Mr Ingram", "383880", 10050.35);
    printf("\n"); //print new line
    display_account (a1);
    withdraw (a1, 550.50);
    deposit (a1, 790.00);
    display_account (a1);
    delete_account (a1);
    printf("\n"); //print new line
    
    bankaccount* a3 = create_account("John Doe", "325201", 5.76);
    display_account (a3);
    withdraw (a3, -10.00);
    deposit (a3, 199.45);
    delete_account (a3);
    printf("\n") //print new line
    
    bankaccount* a4 = create_account("Megan Good", "123456", 3415.23);
    display_account(a4);
    withdraw (a4, 423.10);
    deposit (a4, -343.50);
    delete_account (a4);
    printf("\n"); //print new line
    
    bankaccount* a2 = create_account("Ben Frank", "1790", -100);
    
    display_account(a2);
    delete_account(a2);
    printf("\n"); //print new line
    return 0;
}
